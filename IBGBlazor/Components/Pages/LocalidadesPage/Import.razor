@page "/localidades/import"
@using Microsoft.AspNetCore.Authorization
@using OfficeOpenXml
@inject IBGBlazor.Data.ApplicationDbContext DB
@inject NavigationManager NavigationManager

@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>Importar Dados</PageTitle>

<div class="container">
    <div class="d-flex align-items-center">
        <a class="btn btn-outline-light border rounded-circle" href="/localidades"><svg xmlns="http://www.w3.org/2000/svg" height="46" width="40" viewBox="0 0 320 512"><!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.--><path d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l192 192c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L77.3 256 246.6 86.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-192 192z"/></svg></a>
        <h1 class="display-3 mx-4">Importar Dados</h1>
    </div>
    <hr />
    <div class="col-md-6">
        <p>Clique no botão abaixo para importar os arquivos</p>
        <button class="form-control" onclick="document.getElementById('getFile').click()"><svg
                xmlns="http://www.w3.org/2000/svg" height="16" width="14"
                viewBox="0 0 448 512"><!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.-->
                <path
                    d="M246.6 9.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 109.3V320c0 17.7 14.3 32 32 32s32-14.3 32-32V109.3l73.4 73.4c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-128-128zM64 352c0-17.7-14.3-32-32-32s-32 14.3-32 32v64c0 53 43 96 96 96H352c53 0 96-43 96-96V352c0-17.7-14.3-32-32-32s-32 14.3-32 32v64c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V352z" />
            </svg><span class="">Importar Dados</span></button>
        <InputFile style="display:none" id="getFile" class="form-control mt-3" OnChange="ImportFromExcel"
            accept=".xlsx" />
    </div>

</div>

@code {
    private async Task ImportFromExcel(InputFileChangeEventArgs e)
    {
        var browsesrFile = e.File;
        if (browsesrFile != null)
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

            var tempFileName = Path.GetTempFileName();
            var extension = Path.GetExtension(browsesrFile.Name);
            tempFileName = Path.ChangeExtension(tempFileName, extension);
            var destinationStream = new FileStream(tempFileName, FileMode.Create);
            await browsesrFile.OpenReadStream().CopyToAsync(destinationStream);
            destinationStream.Close();

            var package = new ExcelPackage(new FileInfo(tempFileName));
            await ImportEstados(package);
            await DB.SaveChangesAsync();
            await ImportMunicipios(package);
            await DB.SaveChangesAsync();

            NavigationManager.NavigateTo("/localidades/");
        }
        else
        {
            // Lógica para lidar com o caso em que nenhum arquivo foi selecionado
            Console.WriteLine("Nenhum arquivo selecionado para upload.");
        }

    }

    private async Task ImportEstados(ExcelPackage package)
    {
        var worksheet = package.Workbook.Worksheets[0];
        var lastRow = worksheet.Dimension.End.Row;

        for (int i = 2; i <= lastRow; i++)
        {
            var codigo = worksheet.Cells[i, 1].Value;
            string? nome = worksheet.Cells[i, 2].Value.ToString();
            nome = nome.Replace("'", "''");
            var sigla = worksheet.Cells[i, 3].Value;

            string? query = worksheet.Cells[i, 4].Value.ToString();
            await DB.ExecuteSqlRaw(query);

            Estado estado = new Estado { Codigo_UF = codigo.ToString(), Nome_UF = nome, Sigla_UF = sigla.ToString() };
            //Console.WriteLine($"Adicionar estado: {estado}");
        }

    }

    private async Task ImportMunicipios(ExcelPackage package)
    {
        var worksheet = package.Workbook.Worksheets[1];
        var lastRow = worksheet.Dimension.End.Row;
        List<Municipio> municipios = new();
        try
        {
            for (int i = 2; i <= lastRow; i++)
            {
                var codigo = worksheet.Cells[i, 1].Value;
                string? nome = worksheet.Cells[i, 2].Value.ToString();
                nome = nome.Replace("'", "''");
                var codigo_uf = worksheet.Cells[i, 3].Value;

                string? query = worksheet.Cells[i, 4].Value.ToString();

                var estado = await DB.Estados.FirstOrDefaultAsync(e => e.Codigo_UF == codigo_uf.ToString());
                if (estado != null)
                {
                    Municipio municipio = new Municipio { Codigo_Municipio = codigo.ToString(), Estado = estado, Nome_Municipio = nome };
                    await DB.Municipios.AddAsync(municipio);
                    await DB.SaveChangesAsync();
                    //municipios.Add(municipio);
                }
            }
            // await DB.Municipios.AddRangeAsync(municipios);
            // await DB.SaveChangesAsync();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

}
